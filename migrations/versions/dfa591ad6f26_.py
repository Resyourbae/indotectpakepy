"""empty message

Revision ID: dfa591ad6f26
Revises: 
Create Date: 2025-08-05 15:38:54.628737

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'dfa591ad6f26'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=60), nullable=False),
    sa.Column('email', sa.String(length=150), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.drop_table('cache')
    with op.batch_alter_table('jobs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('jobs_queue_index'))

    op.drop_table('jobs')
    with op.batch_alter_table('sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('sessions_last_activity_index'))
        batch_op.drop_index(batch_op.f('sessions_user_id_index'))

    op.drop_table('sessions')
    op.drop_table('users')
    op.drop_table('migrations')
    op.drop_table('cache_locks')
    op.drop_table('job_batches')
    op.drop_table('password_reset_tokens')
    op.drop_table('failed_jobs')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('failed_jobs',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('connection', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('queue', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('payload', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('exception', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('failed_at', postgresql.TIMESTAMP(precision=0), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('failed_jobs_pkey')),
    sa.UniqueConstraint('uuid', name=op.f('failed_jobs_uuid_unique'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('password_reset_tokens',
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=0), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('email', name=op.f('password_reset_tokens_pkey'))
    )
    op.create_table('job_batches',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('total_jobs', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pending_jobs', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('failed_jobs', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('failed_job_ids', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('options', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cancelled_at', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('finished_at', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('job_batches_pkey'))
    )
    op.create_table('cache_locks',
    sa.Column('key', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('owner', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('expiration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('key', name=op.f('cache_locks_pkey'))
    )
    op.create_table('migrations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('migration', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('batch', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('migrations_pkey'))
    )
    op.create_table('users',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email_verified_at', postgresql.TIMESTAMP(precision=0), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('remember_token', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=0), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=0), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey')),
    sa.UniqueConstraint('email', name=op.f('users_email_unique'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('sessions',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('payload', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('last_activity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('sessions_pkey'))
    )
    with op.batch_alter_table('sessions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('sessions_user_id_index'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('sessions_last_activity_index'), ['last_activity'], unique=False)

    op.create_table('jobs',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('queue', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('payload', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('attempts', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('reserved_at', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('available_at', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('jobs_pkey'))
    )
    with op.batch_alter_table('jobs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('jobs_queue_index'), ['queue'], unique=False)

    op.create_table('cache',
    sa.Column('key', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expiration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('key', name=op.f('cache_pkey'))
    )
    op.drop_table('user')
    # ### end Alembic commands ###
